{
    "contents" : "#' Activity Summary--MVPA\n#'\n#' Summarize activity measures using MVPA\n#' @param final.dat cleaned final data that is between record getup time and sleep time\n#' @param record.sleep.time Log file of sleep time\n#' @param record.getup.time Log file of getup time\n#' @param ll the id of getup time record\n#' @return ... ...\n#' @export\n\nMVPA_summary=function(final.dat,record.getup.time, record.sleep.time)\n {\n  Summary.Statistics.Table5<-c()\n  for (ll in 1: length(record.getup.time) )\n  {\n    temp.mat<-subset(final.dat,final.dat[,1]>record.getup.time[ll] & final.dat[,1]<record.sleep.time[ll] )\n if(nrow(temp.mat)==0)next\n    temp.mat.for.activity<- temp.mat\n    temp.mat.for.activity$Activity[temp.mat.for.activity$Activity==1]<-2\n    end.pos<-cumsum(rle(temp.mat.for.activity$Activity)$lengths)\n    start.pos<-c(0,end.pos[1:(length(end.pos)-1)])+1\n    ############### for each runs, handle the data\n    handle.runs<- sapply(1:length(end.pos),function(x,data.mat=temp.mat.for.activity)\n    {\n      select.data<-data.mat[start.pos[x]:end.pos[x],]\n      combine.data<- c(min(select.data$date.time),sum(select.data$Interval),max(select.data$Activity),sum(select.data$METs) )\n      return(combine.data)\n    }, simplify=F\n    )\n    ############### combine each run\n    combined.temp.mat.for.activity<-data.frame(do.call(rbind,handle.runs))\n    colnames(combined.temp.mat.for.activity)<-c(\"date.time\", \"Interval\", \"ActivityCode\",\"METs\")\n    ###############\n    ###############Calculation\n    ###############\n    ###\n    temp.activity<-subset(combined.temp.mat.for.activity,combined.temp.mat.for.activity$ActivityCode==2)$Interval\n    ###\n\n\n  mvpa.sporadic.interval<- 1/4          ### 1 means 1 minute; 0.5 means 30 seconds; 1/6 means 10 seconds\n\n\nmvpa.1min.mat<-temp.mat\nstart.time<-mvpa.1min.mat$date.time[1]\nend.time<-  mvpa.1min.mat$date.time[nrow(mvpa.1min.mat)]\nnum.1min.interval<- trunc( (end.time-start.time)*24*60*60/(60*mvpa.sporadic.interval) )   ###point 1\n#(end.time-start.time) != sum(temp.mat$Interval)/60/60/24 if there is take off\ninterval.length<-mvpa.sporadic.interval*60/60/60/24\ninterval.1min.start<-start.time+interval.length*(1:(num.1min.interval))\n##################\nmvpa.record.start.time<-c(start.time, interval.1min.start)\nmvpa.record.end.time<-c(interval.1min.start,end.time)\n################## if there is take off, they won't be in combine.original.pseudo.mat\ncombine.original.pseudo.mat<-do.call(rbind,sapply(1: length(mvpa.record.start.time),function(ll){\n  temp.mat<-subset(mvpa.1min.mat,mvpa.1min.mat[,1]+mvpa.1min.mat[,2]/24/60/60>mvpa.record.start.time[ll] & mvpa.1min.mat[,1]<mvpa.record.end.time[ll] )\n  if(nrow(temp.mat)==0) return (NULL)\n  if(temp.mat[nrow(temp.mat),1]+(temp.mat[nrow(temp.mat),2]/24/60/60)> mvpa.record.end.time[ll])  ###if this activity is the last one and it surpass the take off log time\n  {\n    temp.mat[nrow(temp.mat),4]<-temp.mat[nrow(temp.mat),4]*(mvpa.record.end.time[ll]-temp.mat[nrow(temp.mat),1])/(temp.mat[nrow(temp.mat),2]/24/60/60)\n    temp.mat[nrow(temp.mat),2]<- (mvpa.record.end.time[ll]-temp.mat[nrow(temp.mat),1])*24*60*60\n  }\n  if(temp.mat[1,1]<mvpa.record.start.time[ll])   ###if this activity is the first one and itis earlier than the take on log time\n  {\n    temp.mat[1,4]<-temp.mat[1,4]* (temp.mat[1,2]-(mvpa.record.start.time[ll]- temp.mat[1,1])*24*60*60)/temp.mat[1,2]\n    temp.mat[1,2]<-temp.mat[1,2]-(mvpa.record.start.time[ll]- temp.mat[1,1])*24*60*60\n    temp.mat[1,1]<-mvpa.record.start.time[ll]\n  }\n\n  return(cbind(temp.mat,ll))\n}, simplify = F)  )\n\ncolnames(combine.original.pseudo.mat)<-c(\"date.time\",\"Interval\",\"ActivityCode\", \"METs\",\"one.minute.interval\")\n############################################################\n############################################################ step2 summary 1 min intervals\n############################################################\none.minute.collection<-by(combine.original.pseudo.mat,combine.original.pseudo.mat$one.minute.interval,function(s)c(min(s$date.time),sum(s$METs)*(60/mvpa.sporadic.interval),unique(s$one.minute.interval),sum(s$Interval)  )) ###point 3\none.minute.mat<-do.call(rbind,one.minute.collection)\none.minute.mat<-subset(one.minute.mat,one.minute.mat[,3]!=0 & one.minute.mat[,4]>(60*mvpa.sporadic.interval*0.9) & one.minute.mat[,4]<(60*mvpa.sporadic.interval*1.1)     )  ### one.minute.mat[,4] is the true length, it may not be exactly 30 second, can have a few seconds bias\n#########################\nif(trunc(nrow(one.minute.mat)/(10/mvpa.sporadic.interval))==0)  {\n  ten.minute.vec<-rep(1,nrow(one.minute.mat))\n  if(nrow(one.minute.mat)==1) ten.minute.mat<- data.frame(t(c(one.minute.mat[1:length(ten.minute.vec),],ten.minute.vec)))\n  if(nrow(one.minute.mat)>1) ten.minute.mat<- data.frame(cbind(one.minute.mat[1:length(ten.minute.vec),],ten.minute.vec))\n} else\n{\n  ten.minute.vec<-rep(1:trunc(nrow(one.minute.mat)/(10/mvpa.sporadic.interval)),each=  (10/mvpa.sporadic.interval)    )    ##### 30s to 10 min ###point 4\n  ten.minute.mat<- data.frame(cbind(one.minute.mat[1:length(ten.minute.vec),],ten.minute.vec))\n}\n\ncolnames(ten.minute.mat)<-c(\"date.time\",\"mets\",\"one.minute.interval\",\"interval.length\",\"ten.minute.interval\")\n############################################################\n############################################################ step3 summary 10 min intervals\n############################################################\n#### if in 10 minutes, 8 minutes have METs>3, it is MVPA bout; if less than 8minutes, they are counted as mvpa sporadic.\nis.mvpa<-function(s) if(s>=(8/mvpa.sporadic.interval)    ) return(1) else return(0)   ###point 5  ### this is for MVPA long bout\nten.minute.collection<- data.frame(do.call(rbind,by(ten.minute.mat,ten.minute.mat$ten.minute.interval,function(s)c(min(s$date.time), is.mvpa(length(which(s$mets>=3))), mean(s$mets),length(which(s$mets>=3)), abs(max(s$date.time)-min(s$date.time)-sum(s$interval.length[1:(length(s$interval.length)-1)])/24/60/60 )   ))))\ncolnames(ten.minute.collection)<-c(\"date.time\",\"mvpa\",\"mets\",\"mvpa.sporadic\",\"is.interval.valid\")  #### is.interval.valid is to avoid the wear off during the day problem\nten.minute.collection<-subset(ten.minute.collection,is.interval.valid<0.003) ###if the interval has 5 minutes take off, we do not take it\n\n############################################################\n############################################################ step4 MVPA information\n############################################################\n#### total time\nTotal.MVPA.Long.Bout.time<-nrow(subset(ten.minute.collection,mvpa==1))/6  ###by hours\nTotal.MVPA.Sporadic.time<-sum(subset(ten.minute.collection,mvpa.sporadic>0 & mvpa!=1)$mvpa.sporadic )/(60/mvpa.sporadic.interval) ###by hours ###point 6\nTotal.MVPA.time<- Total.MVPA.Long.Bout.time+Total.MVPA.Sporadic.time\nTotal.light.time<- sum(temp.activity) /60/60-Total.MVPA.time\n#### Long Bouts+Sporadic.time runs\nLong.Bouts.and.Sporadic.run<- rle(ifelse( one.minute.mat[,2]>=3,1,0))\nTotal.Number.of.MVPA.Long.Bouts.and.Sporadic<-  length(which(Long.Bouts.and.Sporadic.run$values==1))\n\nrun.for.Long.Bouts.and.Sporadic.mvpa<- Long.Bouts.and.Sporadic.run$lengths[which(Long.Bouts.and.Sporadic.run$values==1)]/ (60/mvpa.sporadic.interval) ###by hours ###point 7\n\nif(Total.MVPA.time==0)  Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.2<-0 else  Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.2<-100*length(run.for.Long.Bouts.and.Sporadic.mvpa[run.for.Long.Bouts.and.Sporadic.mvpa>1/30])/Total.Number.of.MVPA.Long.Bouts.and.Sporadic\nif(Total.MVPA.time==0)  Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.5<-0 else  Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.5<-100*length(run.for.Long.Bouts.and.Sporadic.mvpa[run.for.Long.Bouts.and.Sporadic.mvpa>1/12])/Total.Number.of.MVPA.Long.Bouts.and.Sporadic\nif(Total.MVPA.time==0)  Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.10<-0 else Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.10<-100*length(run.for.Long.Bouts.and.Sporadic.mvpa[run.for.Long.Bouts.and.Sporadic.mvpa>1/6])/Total.Number.of.MVPA.Long.Bouts.and.Sporadic\n\n\n#### Long Bouts Only runs\nrun.for.mvpa<-rle(ten.minute.collection$mvpa)\n\nTotal.Number.of.MVPA.Long.Bouts<-  length(which(run.for.mvpa$values==1))\ntemp.mvpa.long.bout<-run.for.mvpa$lengths[which(run.for.mvpa$values==1)]/6 ###by hours\nif(Total.Number.of.MVPA.Long.Bouts==0) Mean.MVPA.Long.Bout.Length<-0 else Mean.MVPA.Long.Bout.Length<-mean(temp.mvpa.long.bout)\n####\nif(Total.Number.of.MVPA.Long.Bouts==0)  Proportion.of.MVPA.Long.Bouts.greater.10<-0 else  Proportion.of.MVPA.Long.Bouts.greater.10<-100*length(temp.mvpa.long.bout[temp.mvpa.long.bout>1/6])/Total.Number.of.MVPA.Long.Bouts\nif(Total.Number.of.MVPA.Long.Bouts==0)  Proportion.of.MVPA.Long.Bouts.greater.20<-0 else  Proportion.of.MVPA.Long.Bouts.greater.20<-100*length(temp.mvpa.long.bout[temp.mvpa.long.bout>2/6])/Total.Number.of.MVPA.Long.Bouts\n#### percentile is not meaningful, always too short\n####if(Total.Number.of.MVPA.Long.Bouts==0)\n#### {\n####percentile.MVPA.Long.Bouts.time.5<- 0\n####percentile.MVPA.Long.Bouts.time.25<- 0\n####percentile.MVPA.Long.Bouts.time.50<- 0\n####percentile.MVPA.Long.Bouts.time.75<- 0\n####percentile.MVPA.Long.Bouts.time.95<- 0\n#### } else {\n####  Percentiles.of.MVPA.Long.Bout.Length.quantile<- quantile(temp.mvpa.long.bout, probs = c(0.05,0.25,0.5,0.75,0.95))\n####percentile.MVPA.Long.Bouts.time.5<- Percentiles.of.MVPA.Long.Bout.Length.quantile[1]\n####percentile.MVPA.Long.Bouts.time.25<- Percentiles.of.MVPA.Long.Bout.Length.quantile[2]\n####percentile.MVPA.Long.Bouts.time.50<- Percentiles.of.MVPA.Long.Bout.Length.quantile[3]\n####percentile.MVPA.Long.Bouts.time.75<- Percentiles.of.MVPA.Long.Bout.Length.quantile[4]\n####percentile.MVPA.Long.Bouts.time.95<- Percentiles.of.MVPA.Long.Bout.Length.quantile[5]\n####        }\n\n\n####################################################\n#################################################### MET.value\n####################################################\nHighest.MET.value.15s<- max(one.minute.mat[,2])\nHighest.MET.value.10min<- max(ten.minute.collection[,3])\n################################################ MET.value from MVPA\nTotal.MET.hrs.Long.Bouts.and.Sporadic.mvpa<- sum((one.minute.mat[,2]/60/60*one.minute.mat[,4])[one.minute.mat[,2]>=3])\nTotal.MET.hrs.Long.Bouts<- sum((subset(ten.minute.collection,mvpa==1))$mets/60*10)\n\n\ntable5<- c(88888888,Total.light.time,Total.MVPA.time, Total.MVPA.Long.Bout.time,Total.MVPA.Sporadic.time,Total.Number.of.MVPA.Long.Bouts.and.Sporadic,Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.2,Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.5,Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.10, Total.Number.of.MVPA.Long.Bouts,Mean.MVPA.Long.Bout.Length, Proportion.of.MVPA.Long.Bouts.greater.10,Proportion.of.MVPA.Long.Bouts.greater.20, Highest.MET.value.15s,Highest.MET.value.10min, Total.MET.hrs.Long.Bouts.and.Sporadic.mvpa,Total.MET.hrs.Long.Bouts)\ntable5.label<- c(\"88888888\",\"Total.light.time\",\"Total.MVPA.time\",\"Total.MVPA.Long.Bout.time\",\"Total.MVPA.Sporadic.time\",\"Total.Number.of.MVPA.Long.Bouts.and.Sporadic\",\"Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.2\",\"Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.5\",\"Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.10\",\"Total.Number.of.MVPA.Long.Bouts\",\"Mean.MVPA.Long.Bout.Length\",\"Proportion.of.MVPA.Long.Bouts.greater.10\",\"Proportion.of.MVPA.Long.Bouts.greater.20\",\"Highest.MET.value.15s\",\"Highest.MET.value.10min\",\"Total.MET.hrs.Long.Bouts.and.Sporadic.mvpa\",\"Total.MET.hrs.Long.Bouts\")\nSummary.Statistics.Table5<-rbind(Summary.Statistics.Table5,table5)\n\n# out=list( Total.light.time=Total.light.time,Total.MVPA.time=Total.MVPA.time, Total.MVPA.Long.Bout.time=Total.MVPA.Long.Bout.time,Total.MVPA.Sporadic.time=Total.MVPA.Sporadic.time,Total.Number.of.MVPA.Long.Bouts.and.Sporadic=Total.Number.of.MVPA.Long.Bouts.and.Sporadic,Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.2=Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.2,Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.5=Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.5,Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.10=Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.10, Total.Number.of.MVPA.Long.Bouts=Total.Number.of.MVPA.Long.Bouts,Mean.MVPA.Long.Bout.Length=Mean.MVPA.Long.Bout.Length, Proportion.of.MVPA.Long.Bouts.greater.10=Proportion.of.MVPA.Long.Bouts.greater.10,Proportion.of.MVPA.Long.Bouts.greater.20=Proportion.of.MVPA.Long.Bouts.greater.20, Highest.MET.value.15s= Highest.MET.value.15s,Highest.MET.value.10min=Highest.MET.value.10min, Total.MET.hrs.Long.Bouts.and.Sporadic.mvpa= Total.MET.hrs.Long.Bouts.and.Sporadic.mvpa,Total.MET.hrs.Long.Bouts=Total.MET.hrs.Long.Bouts,table5=table5,table5.label=table5.label,Summary.Statistics.Table5=Summary.Statistics.Table5)\n# return(out)\n  }\n  colnames(Summary.Statistics.Table5)=c(\"88888888\",\"Total.light.time\",\"Total.MVPA.time\",\"Total.MVPA.Long.Bout.time\",\"Total.MVPA.Sporadic.time\",\"Total.Number.of.MVPA.Long.Bouts.and.Sporadic\",\"Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.2\",\"Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.5\",\"Proportion.of.MVPA.Long.Bouts.and.Sporadic.greater.10\",\"Total.Number.of.MVPA.Long.Bouts\",\"Mean.MVPA.Long.Bout.Length\",\"Proportion.of.MVPA.Long.Bouts.greater.10\",\"Proportion.of.MVPA.Long.Bouts.greater.20\",\"Highest.MET.value.15s\",\"Highest.MET.value.10min\",\"Total.MET.hrs.Long.Bouts.and.Sporadic.mvpa\",\"Total.MET.hrs.Long.Bouts\")\n\n  # out=list( total.sed.time=total.sed.time,total.number.of.sed.bouts=total.number.of.sed.bouts,mean.sed.bout.length,prop.of.sed.time.greater.20min=mean.sed.bout.length,prop.of.sed.time.greater.20min,prop.of.sed.time.greater.60min=prop.of.sed.time.greater.60min, prop.of.sed.time.greater.120min= prop.of.sed.time.greater.120min,total.sed.time.greater.20min=total.sed.time.greater.20min,total.sed.time.greater.60min=total.sed.time.greater.60min,total.sed.time.greater.120min=total.sed.time.greater.120min,percentile.sed.time.5,percentile.sed.time.25=percentile.sed.time.5,percentile.sed.time.25,percentile.sed.time.50=percentile.sed.time.50,percentile.sed.time.75=percentile.sed.time.75,percentile.sed.time.95=percentile.sed.time.95,alpha.sed=alpha.sed,gini.index.sed=gini.index.sed,prop.sed.time.6.12=prop.sed.time.6.12,prop.sed.time.12.18=prop.sed.time.12.18,prop.sed.time.18.22=prop.sed.time.18.22,table2=table2,table2.label=table2.label,Summary.Statistics.Table2=Summary.Statistics.Table2)\n  out=list(Summary.Statistics.Table5=Summary.Statistics.Table5,table5.label=table5.label)\n\n  return(out)\n}\n",
    "created" : 1449192688618.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1138538138",
    "id" : "BB0590BF",
    "lastKnownWriteTime" : 1449270019,
    "path" : "~/wear/R/MVPA_summary.R",
    "project_path" : "R/MVPA_summary.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "type" : "r_source"
}