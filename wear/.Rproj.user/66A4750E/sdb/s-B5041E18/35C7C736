{
    "contents" : "clean_time=function(dat,takeoff.time){\n  record<-takeoff.time\n\n  ###\n  if(nrow(record)==0)next\n  ###\n  record.start.time<-c()\n  record.end.time<-c()\n  for (kk in 1:nrow(record))\n  {\n    temp.start.time<-as.numeric(as.POSIXlt(strptime(as.character(paste(as.character(record[kk,3] ),as.character(record[kk,4]))),\"%m/%d/%Y %H:%M:%S\"))+2209136400)/24/60/60\n    record.start.time<-c(record.start.time,temp.start.time)\n\n    temp.end.time<-as.numeric(as.POSIXlt( strptime(as.character(paste(as.character(record[kk,5] ),as.character(record[kk,6]))),\"%m/%d/%Y %H:%M:%S\")  )+2209136400)/24/60/60\n    record.end.time<-c(record.end.time,temp.end.time)\n  }\n  ##########################################  match get up time with take on time/// if multiple take on time in a day, the second take on time is seen as get up time\n  #####list days take on\n  #####time.char<-as.numeric(format(as.POSIXlt(record.start.time*24*60*60, origin = ISOdatetime(1899,12,30,0,0,0) ),\"%d\"))\n  ###\n#   record.getup<-subset(bed.time,bed.time$id==person)\n#   ###\n#   record.getup.time<-c()\n#   record.sleep.time<-c()\n#   for (kk in 1:nrow(record.getup))\n#   {\n#     temp.getup.time<-as.numeric(as.POSIXlt(strptime(as.character(paste(as.character(record.getup[kk,3] ),as.character(record.getup[kk,4]))),\"%m/%d/%Y %H:%M:%S\"))+2209136400)/24/60/60\n#     record.getup.time<-c(record.getup.time,temp.getup.time)\n#     temp.sleep.time<-as.numeric(as.POSIXlt(strptime(as.character(paste(as.character(record.getup[kk,5] ),as.character(record.getup[kk,6]))),\"%m/%d/%Y %H:%M:%S\"))+2209136400)/24/60/60\n#     record.sleep.time<-c(record.sleep.time,temp.sleep.time)\n#   }\nif(is.numeric(dat$Time)==F) ####if  is.numeric(dat$Time)==F, we need further modification of time in next step\n{\n  ee<-as.character(dat$Time)\n  max_length<-max(nchar(ee))\n  ee[nchar(ee)!=max_length]<-\"#1899-12-30 00:00:00#\"\n  #### use character type, may not be good\n  ee_new<- (as.numeric( as.POSIXlt( substr(ee, 2, max_length-1 )  )    )+2209136400)/24/60/60\n  #### use interval type, this is the best\n  start_ee<-  min(which(dat[,2]>0))-1\n  if (start_ee>1)\n  {\n    ee_new_int_type <-c( ee_new[1:((start_ee)-1)],ee_new[start_ee]+(dat$DataCount[start_ee:nrow(dat)]/10/24/60/60)  )\n  }else\n  {    ee_new_int_type <-ee_new[start_ee]+(dat$DataCount[start_ee:nrow(dat)]/10/24/60/60)\n  } #### if interval type has large difference with character type, use character type\n  int_dif_char<-which(abs(ee_new-ee_new_int_type)>0.1 )\n  ee_new_int_type[int_dif_char]<-ee_new[int_dif_char]\n  ####\n  dat<-cbind(ee_new_int_type,dat[,2:6])\n}\nfinal_dat<-dat[,c(1,3,4,6)]\ncolnames(final_dat)<-c(\"date_time\",\"Interval\",\"ActivityCode\", \"METs\")\nfinal_dat=final_dat[final_dat$date_time!=0,] #delete rows with time as #1899-12-30 00:00:00#\nfinal_dat<-do.call(rbind,sapply( 1: length(record.start.time),function(ll){\n  temp.mat<-final_dat[(final_dat[,1]+final_dat[,2]/24/60/60)>record.start.time[ll] & final_dat[,1]<record.end.time[ll] ,]\n  if(nrow(temp.mat)==0) return (NULL)\n  if(temp.mat[nrow(temp.mat),1]+(temp.mat[nrow(temp.mat),2]/24/60/60)> record.end.time[ll])  ###if this activity is the last one and it surpass the take off log time\n  {\n    temp.mat[nrow(temp.mat),4]<-temp.mat[nrow(temp.mat),4]*(record.end.time[ll]-temp.mat[nrow(temp.mat),1])/(temp.mat[nrow(temp.mat),2]/24/60/60)\n    temp.mat[nrow(temp.mat),2]<- (record.end.time[ll]-temp.mat[nrow(temp.mat),1])*24*60*60\n  }\n  if(temp.mat[1,1]<record.start.time[ll])   ###if this activity is the first one and itis earlier than the take on log time\n  {\n    temp.mat[1,4]<-temp.mat[1,4]* (temp.mat[1,2]-(record.start.time[ll]- temp.mat[1,1])*24*60*60)/temp.mat[1,2]\n    temp.mat[1,2]<-temp.mat[1,2]-(record.start.time[ll]- temp.mat[1,1])*24*60*60\n    temp.mat[1,1]<-record.start.time[ll]\n  }\n\n  return(temp.mat)\n}, simplify = F))\n\nnew_date=0\nfinal_dat=cbind(final_dat,new_date)\nfor (i in 1:nrow(final_dat)){\n  #eg: 2010-03-31 23:59:59 is 40268.9583217593; 2010-04-01 00:00:00 is 40268.9583333333 but this is count as 2010-03-31\n  if(final_dat$date_time[i]-floor(final_dat$date_time[i])<=0.125){ #eg: 2010-04-01 04:00:00 is 40269.125 but it is counted as 2010-03-31 so overwrite the date using 2010-03-31\n    final_dat$new_date[i]= floor(final_dat$date_time[i])-1+0.125 }else{\n      final_dat$new_date[i]= floor(final_dat$date_time[i])+0.125}\n}\n\n\nreturn(final_dat)\n}\n",
    "created" : 1454350725075.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2806317744",
    "id" : "35C7C736",
    "lastKnownWriteTime" : 1454455398,
    "path" : "C:/Users/Yukun Zhang/Desktop/Yukun/wear/R/clean_time.R",
    "project_path" : "R/clean_time.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_source"
}